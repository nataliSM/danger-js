"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mockfs = require("fs");
jest.mock("node-fetch", () => () => Promise.resolve({
    ok: true,
    json: () => Promise.resolve(JSON.parse(mockfs.readFileSync("src/fixtures/danger-npm-info.json", "utf8"))),
}));
const index_1 = require("./index");
beforeEach(() => {
    global.warn = jest.fn();
    global.message = jest.fn();
    global.fail = jest.fn();
    global.markdown = jest.fn();
    global.danger = { utils: { sentence: jest.fn() } };
});
afterEach(() => {
    global.warn = undefined;
    global.message = undefined;
    global.fail = undefined;
    global.markdown = undefined;
});
describe("checkForRelease", () => {
    it("Says congrats if there is a package diff version change", () => {
        index_1.checkForRelease({ version: { before: "1.0.0", after: "1.0.1" } });
        expect(global.message).toHaveBeenCalledWith(":tada: - congrats on your new release");
    });
    it("Says nothing if there is a no difference in version", () => {
        index_1.checkForRelease({ version: { before: "1.0.0", after: "1.0.0" } });
        expect(global.message).toHaveBeenCalledTimes(0);
    });
    it("Says nothing if there is a backslip in version", () => {
        index_1.checkForRelease({ version: { before: "1.0.0", after: "0.2.0" } });
        expect(global.message).toHaveBeenCalledTimes(0);
    });
    it("does nothing when there's no version change", () => {
        index_1.checkForRelease({});
        expect(global.markdown).toHaveBeenCalledTimes(0);
    });
});
describe("checkForTypesInDeps", () => {
    it("does nothing when there's no dependency changes", () => {
        index_1.checkForTypesInDeps({});
        expect(global.fail).toHaveBeenCalledTimes(0);
    });
    it("when there is an @types dependency, it should call fail", () => {
        const deps = {
            dependencies: {
                added: ["@types/danger"],
            },
        };
        index_1.checkForTypesInDeps(deps);
        expect(global.fail).toHaveBeenCalledTimes(1);
    });
});
describe("checkForLockfileDiff", () => {
    it("does nothing when there's no dependency changes", () => {
        index_1.checkForLockfileDiff({});
        expect(global.warn).toHaveBeenCalledTimes(0);
    });
    it("when there are dependency changes, and no lockfile in modified - warn", () => {
        global.danger = { git: { modified_files: [] } };
        const deps = {
            dependencies: {},
        };
        index_1.checkForLockfileDiff(deps);
        expect(global.warn).toHaveBeenCalledTimes(1);
    });
    it("when there are dependency changes, and a lockfile in modified - do not warn", () => {
        global.danger = { git: { modified_files: ["yarn.lock"] } };
        const deps = { dependencies: {} };
        index_1.checkForLockfileDiff(deps);
        expect(global.warn).toHaveBeenCalledTimes(0);
    });
});
describe("npm metadata", () => {
    it("Shows a bunch of useful text for a new dep", () => __awaiter(this, void 0, void 0, function* () {
        const data = yield index_1.getNPMMetadataForDep("danger");
        expect(data).toMatchSnapshot();
    }));
});
